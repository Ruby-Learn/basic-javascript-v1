/**
 * var 의 문제점
 * - var 변수는 함수 스코프를 가지며 해당 스코프안에서 접근을 제어할 수 없다.
 * - 호이스팅으로 인해 아래에서 선언된 변수를 위에서 사용할 수 있지만 이로 인해 코드의 순서가 직관적이지 않으며 꼬일 수 있다.
 * - var 변수는 무조건 재할당이 가능하며 상수의 기능이 없다.
 * - 선언이 값을 할당하지 않더라도 기본적으로 undefined 가 할당된다. 이는 메모리 상으로 손해를 본다.
 *
 * const 와 let
 * - const 와 let 의 스코프는 블록 스코프이다.
 *      - if 와 for 내에서 정의된 변수는 해당 블록 내에서만 사용(자바와 동일)
 *      - 변수의 스코프가 더 엄격하여 버그를 낼 확률을 줄여주기 때문에 var 가 아닌 const 와 let 을 사용할 것을 권장함
 * - 블록 외부와 내부에 같은 이름의 변수가 있다면 내부에 있는 변수의 접근이 우선순위가 된다.
 * - const 와 let 도 var 처럼 호이스팅이 발생하지만 var 는 호이스팅후 undefined 값이 할당되는 반면 const 와 let 은 값이 할당되지 않는다.
 *      - 때문에 할당되지 않는 변수를 할당하기 전에 사용하면 에러가 발생하므로 호이스팅이 되지 않는다고 착각할 수 있다.
 */



/**
 * var 로 정의된 변수는 함수 스코프를 가진다.
 * - scope : 변수가 사용될 수 있는 영
 */
function example1() {
    var i = 1;
}

// i 가 함수의 영역을 벗어났으므로 에러가 발생함
console.log(i);


function example2() {
    for (var j = 0; j < 10; j++) {
        console.log(j);
    }

    // var 키워도로 정의된 변수의 스코프는 함수이기 때문에 for 문이 끝났음에도 접근할 수 있다.
    console.log(j);
}


/**
 * 즉시 실행 함수
 * - 함수를 정의함과 동시에 바로 호출하여 실행함
 * - 해당 함수 내에서 정의된 변수는 외부에서 접근할 수 없어서 변수의 접근을 제어할 수 있다는 장점이 있다.
 * - 작성하기가 번거롭고 변수의 접근을 제어하기 위해 매번 즉시 실행 함수를 작성하면 코드가 길어질 수 있다.
 */
(function () {
    for (let k = 0; k < 10; k++) {
        console.log(k)
    }
}) ();